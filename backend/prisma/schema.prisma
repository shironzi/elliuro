// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum Role {
  CUSTOMER
  PROPERTY_OWNER
  ADMIN
  SUPPORT_AGENT
}

// Enum for property status
enum Status_List {
  DRAFT
  PUBLISH
  ACTIVE
  SOLD
}

// Enum for property types
enum Property_type {
  HOUSE
  APARTMENT
  HOTEL
  CONDOMINIUM
  PRIVATE
}

// User model represents a user in the system
model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String     @unique
  name       String
  password   String
  role       Role       @default(CUSTOMER)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  property   Property[]

  @@index([username])
}

// Property model represents a property in the system
model Property {
  id         Int         @id @default(autoincrement())
  status     Status      @relation(fields: [status_id], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  details    Details     @relation(fields: [details_id], references: [id], onDelete: Cascade)
  status_id  Int         @unique
  user_id    Int
  details_id Int         @unique
  images     Images[]
  amenities  Amenities[]

  @@index([status_id])
  @@index([user_id])
  @@index([details_id])
}

// Status model represents the status of a property
model Status {
  id       Int         @id @default(autoincrement())
  status   Status_List @default(DRAFT)
  property Property?

  @@index([status])
}

// Details model represents the details of a property
model Details {
  id          Int           @id @default(autoincrement())
  title       String?
  type        Property_type @default(HOUSE)
  location    String        @default("") @map("location")
  price       Int?
  description String?       @db.Text
  Property    Property?

  @@index([type])
  @@index([location])
}

// Images model represents images associated with a property
model Images {
  id          Int       @id @default(autoincrement())
  name        String?
  image       Bytes?
  added_at    DateTime?
  updated_at  DateTime?
  property    Property  @relation(fields: [property_id], references: [id], onDelete: Cascade)
  property_id Int

  @@index([property_id])
}

// Amenities model represents amenities associated with a property
model Amenities {
  id          Int      @id @default(autoincrement())
  name        String
  value       Int
  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  property_id Int

  @@index([property_id])
}
